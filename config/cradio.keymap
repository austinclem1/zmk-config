/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ {

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };


        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };



        combo_enter {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp ENTER>;
        };


        combo_left_reset {
            timeout-ms = <50>;
            key-positions = <3 4 30 31>;
            bindings = <&reset>;
        };

        combo_right_reset {
            timeout-ms = <50>;
            key-positions = <5 6 32 33>;
            bindings = <&reset>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <

    &kp QUOT  &kp CMMA  &kp DOT   &kp P     &kp Y             &kp F     &kp G     &kp C     &kp R     &kp L
    &kp A     &kp O     &kp E     &kp U     &kp I             &kp D     &kp H     &kp T     &kp N     &kp S
    &mt LSFT SCLN &kp Q &kp J     &kp K     &kp X             &kp B     &kp M     &kp W     &kp V     &mt LSFT Z
                                  &mo 1     &kp LCTL          &kp SPC   &mo 2
            >;
        };

        left_layer {
            bindings = <
    &kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5         &kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0
    &kp TAB   &kp TILDE &kp FSLH  &kp SCLN  &kp GRAVE         &kp EQL   &kp MINUS &kp LBKT  &kp RBKT  &kp DEL
    &kp ESC   &kp TILDE &kp BSLH  &kp COLN  &kp PIPE          &kp PLUS  &kp UNDER &kp LBKT  &kp RBKT  &kp ENTER
                                  &mo 1     &kp LCTL          &kp SPC   &mo 2 
            >;
        };

        right_layer {
            bindings = <
    &kp BANG  &kp ATSN  &kp HASH  &kp DLLR  &kp PRCT          &kp CRRT  &kp AMPS  &kp ASTRK &kp LPRN  &kp RPRN
    &kp HASH  &kp GRAVE &kp QMARK &kp COLN  &kp PIPE          &kp UNDER &kp MINUS &kp LBRC  &kp RBRC  &kp BKSP
    &kp LSFT  &kp KPLS  &kp LBKT  &kp RBKT  &kp BSLH          &kp EQL   &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT
                                  &mo 3     &kp LCTL          &kp SPC   &mo 2
            >;
        };

        tri_layer {
            bindings = <
    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &kp NUM_5        &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_DN  &kp C_BRI_UP
    &kp F1        &kp F2        &kp F3        &kp F4        &kp F5           &kp F6      &kp F7        &kp F8        &kp F9        &kp F10
    &bt BT_CLR    &bt BT_NXT    &bt BT_PRV    &kp F6        &kp F7           &trans      &trans        &trans        &kp F11       &kp F12
                                              &trans        &trans           &trans      &trans
            >;
        };

    };
};
